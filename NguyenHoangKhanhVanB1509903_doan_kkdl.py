# -*- coding: utf-8 -*-
"""Doan_KKDL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mWJQAJc1TWCDgamwBXVd0Fj91S3bzx0P
"""

from google.colab import drive

drive.mount('/content/drive')

import numpy as np
import pandas as pd
from sklearn import tree
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.ensemble import RandomForestClassifier
from sklearn import svm


import seaborn as sns
import matplotlib.pyplot as plt
class_zoo = pd.read_csv('drive/My Drive/kkdl/class.csv')
zoo = pd.read_csv('drive/My Drive/kkdl/zoo.csv')

zoo

class_zoo

df = zoo.merge(class_zoo,how='left',left_on='class_type',right_on='Class_Number')
df.head()

features = list(zoo.columns)
print(features)

features.remove('animal_name')

print(features)

X = zoo.iloc[:,1:17]
y = zoo.iloc[:,17]


from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)

"""# Xây dựng mô hình với giải thuật Cây quyết định"""

from sklearn.model_selection import cross_val_score

dt = tree.DecisionTreeClassifier()
score_dt=cross_val_score(dt, X,y, cv=10)
score_dt

print("Accuracy: %0.2f (+/- %0.2f)" % (score_dt.mean(), score_dt.std() * 2))

tree.plot_tree(dt.fit(X, y))
plt.show()

dotfile = open("drive/My Drive/kkdl/dt.dot", 'w')
dotfile = tree.export_graphviz(dt, out_file=dotfile,feature_names=X.columns,class_names=["1","2","3","4","5","6","7" ])

"""Random Forest"""

model = RandomForestClassifier(random_state=1)
cv = cross_val_score(model, X, y, cv=10)
cv

print("Accuracy: %0.2f (+/- %0.2f)" % (cv.mean(), cv.std() * 2))

"""SVM"""

from sklearn.svm import SVC
svc = SVC(kernel='linear', C=1)
score_svc=cross_val_score(svc, X,y, cv=10)
score_svc

print("Accuracy: %0.2f (+/- %0.2f)" % (score_svc.mean(), score_svc.std() * 2))

sns.countplot(df['Class_Type'],label="Count",
             order = df['Class_Type'].value_counts().index)

sns.stripplot(x=df['tail'], y=df["Class_Type"])

df['ct'] = 1
gr = df.groupby(by='animal_name').mean()
columns = ['class_type','Class_Number','Number_Of_Animal_Species_In_Class','ct','legs']
gr.drop(columns, inplace=True, axis=1)
plt.subplots(figsize=(10,4))
sns.heatmap(gr, cmap="YlGnBu")

"""Gom nhom"""

X = df.iloc[:, [2,15]].values

from sklearn.cluster import KMeans
clusters = []
for i in range(1, 10):
 km = KMeans(n_clusters=i).fit(X)
 clusters.append(km.inertia_)

fig, ax = plt.subplots(figsize=(12, 8))
sns.lineplot(x=list(range(1, 10)), y=clusters, ax=ax)
ax.set_title('Đồ thị Elbow')
ax.set_xlabel('Số lượng nhóm')
ax.set_ylabel('Giá trị Inertia')
plt.show()
plt.cla()

km2 = KMeans(n_clusters=2)
y_means = km2.fit_predict(X)

labels = km2.predict(X)
plt.scatter(df['hair'],df['tail'],c = labels)
plt.xlabel('Hair')
plt.xlabel('Tail')
plt.show()

plt.scatter(X[y_means == 0, 0], X[y_means == 0, 1], s = 100, c = 'pink',
label = 'Nhóm 1')
plt.scatter(X[y_means == 1, 0], X[y_means == 1, 1], s = 100, c = 'yellow',
label = 'Nhóm 2')

plt.scatter(km2.cluster_centers_[:,0], km2.cluster_centers_[:, 1], s = 100, c
= 'blue' , label = 'Centeroid')
plt.style.use('fivethirtyeight')
plt.title('K Means Clustering', fontsize = 20)
plt.xlabel('Tail')
plt.ylabel('Hair')
plt.legend()
plt.grid()
plt.show()